{"version":3,"sources":["components/Carousel.tsx","App.tsx","index.tsx"],"names":["Carousel","state","images","props","currentIndex","timersId","currentAnimationDuration","animationDuration","isInfinite","prevSlide","step","infinite","newIndex","startIndex","length","invisibleScroll","setState","nextSlide","frameSize","lastIndex","swapIndex","setCarouselInfinity","setInfinite","imagesClone","unshift","slice","push","setTimeout","this","forEach","clearTimeout","endIndex","itemWidth","className","nameIndex","style","width","transition","transform","map","image","src","alt","type","onClick","React","Component","defaultProps","App","value","htmlFor","id","min","max","onChange","e","setFrameSize","target","setStep","setAnimationDuration","setItemWidth","checked","setInfinity","ReactDOM","render","document","getElementById"],"mappings":"gQAkBMA,E,4MACJC,MAAQ,CACNC,OAAQ,EAAKC,MAAMD,OACnBE,aAAc,G,EAMhBC,SAA6B,G,EAE7BC,yBAAmC,EAAKH,MAAMI,kB,EAE9CC,YAAa,E,EAoBbC,UAAY,WACV,MAAmC,EAAKN,MAAhCO,EAAR,EAAQA,KAAMC,EAAd,EAAcA,SAAUT,EAAxB,EAAwBA,OAElBU,EADmB,EAAKX,MAAtBG,aACgCM,EAExC,GAAIE,GAAY,GAAKD,EAAU,CAC7B,IAAME,EAAaX,EAAOY,OAASF,EAEnC,EAAKG,gBACHF,EAAaH,EACbG,EACA,EAAKP,0BAIT,EAAKU,SAAS,CAAEZ,aAAcQ,EAAW,EAAIA,EAAW,K,EAG1DK,UAAY,WACV,MAEI,EAAKd,MADPO,EADF,EACEA,KAAMQ,EADR,EACQA,UAAWP,EADnB,EACmBA,SAAUT,EAD7B,EAC6BA,OAErBE,EAAiB,EAAKH,MAAtBG,aAEFQ,EAAmBR,EAAeM,EAClCS,EAAYjB,EAAOY,OAASI,EAE5BE,EAAYlB,EAAOY,OAASJ,EAAQN,EAAe,EAAKc,IAA4B,IAAdA,GAE5E,GAAIN,GAAYQ,GAAaT,EAAU,CACrC,IAAME,EAAcT,EAAe,GAAMQ,EAAWQ,KAA6B,IAAdF,GAEnE,EAAKH,gBACHF,EACAH,EAAOG,EACP,EAAKP,0BAIT,EAAKU,SAAS,CACZZ,cAAeO,GAAYC,EAAWO,EAAYA,EAAYP,K,EAIlES,oBAAsB,WAAyB,IAAxBC,IAAuB,yDAC5C,EAAKhB,yBAA2B,EAEhC,MAAiD,EAAKH,MAA9CD,EAAR,EAAQA,OAAQgB,EAAhB,EAAgBA,UAAWX,EAA3B,EAA2BA,kBAErBgB,EAAqB,YAAOrB,GAE9BoB,GACFC,EAAYC,QAAZ,MAAAD,EAAW,YAAYrB,EAAOuB,OAAOP,KACrCK,EAAYG,KAAZ,MAAAH,EAAW,YAASrB,EAAOuB,MAAM,EAAGP,KAEpC,EAAKF,UAAS,SAACf,GAAD,MAAY,CAAEG,aAAcH,EAAMG,aAAec,OAE/D,EAAKF,UAAS,SAACf,GAAD,MAAY,CAAEG,aAAcH,EAAMG,aAAec,MAGjE,EAAKV,WAAac,EAClB,EAAKN,SAAS,CAAEd,OAAQqB,IAExB,EAAKlB,SAASqB,KAAKC,YAAW,WAC5B,EAAKrB,yBAA2BC,IAC/B,O,uDAnFL,WACEqB,KAAKP,oBAAoBO,KAAKzB,MAAMQ,Y,gCAGtC,WACE,IAAQA,EAAaiB,KAAKzB,MAAlBQ,SAEJA,IAAaiB,KAAKpB,WACpBoB,KAAKP,uBACKV,GAAYiB,KAAKpB,YAC3BoB,KAAKP,qBAAoB,K,kCAI7B,WACEO,KAAKvB,SAASwB,QAAQC,gB,6BAuExB,SAAgBjB,EAAoBkB,EAAkBxB,GAA4B,IAAD,OAC/EqB,KAAKvB,SAASqB,KAAKC,YAAW,WAC5B,EAAKrB,yBAA2B,EAChC,EAAKU,SAAS,CAAEZ,aAAcS,MAC7B,IAEHe,KAAKvB,SAASqB,KAAKC,YAAW,WAC5B,EAAKrB,yBAA2BC,EAChC,EAAKS,SAAS,CAAEZ,aAAc2B,MAC7B,Q,oBAGL,WACE,MAA4CH,KAAKzB,MAAzC6B,EAAR,EAAQA,UAAWd,EAAnB,EAAmBA,UAAWe,EAA9B,EAA8BA,UAC9B,EAAiCL,KAAK3B,MAA9BC,EAAR,EAAQA,OAAQE,EAAhB,EAAgBA,aACZ8B,EAAY,EAEhB,OACE,sBACED,UAAS,mBAAcA,GACvBE,MAAO,CACLC,MAAOlB,EAAYc,GAHvB,UAME,qBAAKC,UAAU,mBAAf,SACE,oBACEA,UAAU,iBACVE,MAAO,CACLE,WAAW,aAAD,OAAeT,KAAKtB,yBAApB,MACVgC,UAAU,eAAD,OAAiBlC,EAAe4B,EAAhC,OACTI,MAAOlC,EAAOY,OAASkB,GAL3B,SAQG9B,EAAOqC,KAAI,SAACC,GAGX,OAFAN,GAAa,EAGX,6BACE,qBACEO,IAAKD,EACLE,IAAG,UAAKR,GACRC,MAAO,CACLC,MAAOJ,MALb,UAAYQ,EAAZ,YAAqBN,WAc7B,sBAAKD,UAAU,oBAAf,UACE,wBACEU,KAAK,SACLV,UAAU,0CACVW,QAAShB,KAAKnB,UAHhB,kBAQA,wBACEkC,KAAK,SACLV,UAAU,0CACVW,QAAShB,KAAKX,UAHhB,4B,GAjKa4B,IAAMC,WAAvB9C,EAOG+C,aAAe,GAuKxB/C,EAAS+C,aAAe,CAAEd,UAAW,IAEtBjC,QCrLTgD,E,4MACJ/C,MAAQ,CACNM,kBAAmB,IACnBI,UAAU,EACVqB,UAAW,IACXd,UAAW,EACXR,KAAM,EACNR,OAAQ,CACN,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,iB,iDAIJ,SAAY+C,GACV,MAA4BrB,KAAK3B,MAAzBS,EAAR,EAAQA,KAAMQ,EAAd,EAAcA,UAEdU,KAAKZ,UAAS,iBAAO,CACnBL,SAAUsC,EACVvC,KAAMuC,EAAQ/B,EAAYR,Q,0BAI9B,SAAauC,GACXrB,KAAKZ,SAAS,CAAEE,UAAW+B,M,qBAG7B,SAAQA,GACNrB,KAAKZ,SAAS,CAAEN,KAAMuC,M,0BAGxB,SAAaA,GACXrB,KAAKZ,SAAS,CAAEgB,UAAWiB,M,kCAG7B,SAAqBA,GACnBrB,KAAKZ,SAAS,CAAET,kBAAmB0C,M,oBAGrC,WAAU,IAAD,OACP,EAEIrB,KAAK3B,MADPC,EADF,EACEA,OAAQgB,EADV,EACUA,UAAWR,EADrB,EACqBA,KAAMH,EAD3B,EAC2BA,kBAAmByB,EAD9C,EAC8CA,UAAWrB,EADzD,EACyDA,SAGzD,OACE,sBAAKsB,UAAU,MAAf,UACE,oBAAIA,UAAU,aAAd,sBAEA,cAAC,EAAD,CACE/B,OAAQA,EACRQ,KAAMA,EACNsB,UAAWA,EACXd,UAAWA,EACXX,kBAAmBA,EACnBI,SAAUA,EACVsB,UAAU,kBAGZ,sBAAKA,UAAU,iBAAf,UACE,wBAAOiB,QAAQ,YAAYjB,UAAU,aAArC,gCACkBf,GAEhB,uBACEiC,GAAG,YACHR,KAAK,QACLS,IAAK,EACLC,IAAKnD,EAAOY,OACZmC,MAAO/B,EACPoC,SAAU,SAACC,GAAD,OAAO,EAAKC,cAAcD,EAAEE,OAAOR,aAIjD,wBAAOC,QAAQ,OAAOjB,UAAU,aAAhC,0BACYvB,GAEV,uBACEyC,GAAG,OACHR,KAAK,QACLS,IAAK,EACLC,IAAK1C,EAAWO,EAAYhB,EAAOY,OACnCmC,MAAOvC,EACP4C,SAAU,SAACC,GAAD,OAAO,EAAKG,SAASH,EAAEE,OAAOR,aAI5C,wBAAOC,QAAQ,oBAAoBjB,UAAU,aAA7C,wCAC0B1B,GAExB,uBACE4C,GAAG,oBACHR,KAAK,QACLS,IAAK,EACLC,IAAK,IACL3C,KAAM,IACNuC,MAAO1C,EACP+C,SAAU,SAACC,GAAD,OAAO,EAAKI,sBAAsBJ,EAAEE,OAAOR,aAIzD,wBAAOC,QAAQ,YAAYjB,UAAU,aAArC,gCACkBD,GAEhB,uBACEmB,GAAG,YACHR,KAAK,QACLS,IAAK,GACLC,IAAK,IACL3C,KAAM,GACNuC,MAAOjB,EACPsB,SAAU,SAACC,GAAD,OAAO,EAAKK,cAAcL,EAAEE,OAAOR,aAIjD,wBAAOC,QAAQ,WAAWjB,UAAU,aAApC,UACG,aAED,uBACEkB,GAAG,WACHR,KAAK,WACLS,IAAK,GACLC,IAAK,IACL3C,KAAM,GACNmD,QAASlD,EACT2C,SAAU,SAACC,GAAD,OAAO,EAAKO,YAAYP,EAAEE,OAAOI,eAI/C,mBAAG5B,UAAU,YAAb,0F,GAtIQY,IAAMC,WA8ITE,ICxJfe,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.47585c32.chunk.js","sourcesContent":["import React from 'react';\nimport './Carousel.scss';\n\ntype CarouselProps = {\n  images: string[],\n  step: number,\n  frameSize: number,\n  itemWidth: number,\n  animationDuration: number,\n  infinite: boolean,\n  className?: string,\n};\n\ntype CarouselState = {\n  images: string[],\n  currentIndex: number,\n};\n\nclass Carousel extends React.Component<CarouselProps, CarouselState> {\n  state = {\n    images: this.props.images,\n    currentIndex: 0,\n  };\n\n  // eslint-disable-next-line react/static-property-placement\n  static defaultProps = {};\n\n  timersId: NodeJS.Timeout[] = [];\n\n  currentAnimationDuration: number = this.props.animationDuration;\n\n  isInfinite = false;\n\n  componentDidMount() {\n    this.setCarouselInfinity(this.props.infinite);\n  }\n\n  componentDidUpdate() {\n    const { infinite } = this.props;\n\n    if (infinite && !this.isInfinite) {\n      this.setCarouselInfinity();\n    } else if (!infinite && this.isInfinite) {\n      this.setCarouselInfinity(false);\n    }\n  }\n\n  componentWillUnmount() {\n    this.timersId.forEach(clearTimeout);\n  }\n\n  prevSlide = () => {\n    const { step, infinite, images } = this.props;\n    const { currentIndex } = this.state;\n    const newIndex: number = currentIndex - step;\n\n    if (newIndex <= 0 && infinite) {\n      const startIndex = images.length + newIndex;\n\n      this.invisibleScroll(\n        startIndex + step,\n        startIndex,\n        this.currentAnimationDuration,\n      );\n    }\n\n    this.setState({ currentIndex: newIndex > 0 ? newIndex : 0 });\n  };\n\n  nextSlide = () => {\n    const {\n      step, frameSize, infinite, images,\n    } = this.props;\n    const { currentIndex } = this.state;\n\n    const newIndex: number = currentIndex + step;\n    const lastIndex = images.length - frameSize;\n\n    const swapIndex = images.length + step + (currentIndex % 2) - frameSize * +(frameSize === 1);\n\n    if (newIndex >= swapIndex && infinite) {\n      const startIndex = (currentIndex % 2) + (newIndex - swapIndex) * +(frameSize !== 1);\n\n      this.invisibleScroll(\n        startIndex,\n        step + startIndex,\n        this.currentAnimationDuration,\n      );\n    }\n\n    this.setState({\n      currentIndex: !infinite && newIndex > lastIndex ? lastIndex : newIndex,\n    });\n  };\n\n  setCarouselInfinity = (setInfinite = true) => {\n    this.currentAnimationDuration = 0;\n\n    const { images, frameSize, animationDuration } = this.props;\n\n    const imagesClone: string[] = [...images];\n\n    if (setInfinite) {\n      imagesClone.unshift(...images.slice(-frameSize));\n      imagesClone.push(...images.slice(0, frameSize));\n\n      this.setState((state) => ({ currentIndex: state.currentIndex + frameSize }));\n    } else {\n      this.setState((state) => ({ currentIndex: state.currentIndex - frameSize }));\n    }\n\n    this.isInfinite = setInfinite;\n    this.setState({ images: imagesClone });\n\n    this.timersId.push(setTimeout(() => {\n      this.currentAnimationDuration = animationDuration;\n    }, 100));\n  };\n\n  invisibleScroll(startIndex: number, endIndex: number, animationDuration: number) {\n    this.timersId.push(setTimeout(() => {\n      this.currentAnimationDuration = 0;\n      this.setState({ currentIndex: startIndex });\n    }, 0));\n\n    this.timersId.push(setTimeout(() => {\n      this.currentAnimationDuration = animationDuration;\n      this.setState({ currentIndex: endIndex });\n    }, 100));\n  }\n\n  render() {\n    const { itemWidth, frameSize, className } = this.props;\n    const { images, currentIndex } = this.state;\n    let nameIndex = 0;\n\n    return (\n      <div\n        className={`carousel ${className}`}\n        style={{\n          width: frameSize * itemWidth,\n        }}\n      >\n        <div className=\"carousel__slider\">\n          <ul\n            className=\"carousel__list\"\n            style={{\n              transition: `transform ${this.currentAnimationDuration}ms`,\n              transform: `translateX(-${currentIndex * itemWidth}px)`,\n              width: images.length * itemWidth,\n            }}\n          >\n            {images.map((image: string) => {\n              nameIndex += 1;\n\n              return (\n                <li key={`${image}_${nameIndex}`}>\n                  <img\n                    src={image}\n                    alt={`${nameIndex}`}\n                    style={{\n                      width: itemWidth,\n                    }}\n                  />\n                </li>\n              );\n            })}\n          </ul>\n        </div>\n\n        <div className=\"carousel__buttons\">\n          <button\n            type=\"button\"\n            className=\"carousel__button carousel__button--prev\"\n            onClick={this.prevSlide}\n          >\n            Prev\n          </button>\n\n          <button\n            type=\"button\"\n            className=\"carousel__button carousel__button--next\"\n            onClick={this.nextSlide}\n          >\n            Next\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nCarousel.defaultProps = { className: '' };\n\nexport default Carousel;\n","import React from 'react';\nimport './App.scss';\nimport Carousel from './components/Carousel';\n\ninterface State {\n  images: string[];\n  frameSize: number,\n  step: number,\n  itemWidth: number,\n  animationDuration: number,\n  infinite: boolean,\n}\n\nclass App extends React.Component<{}, State> {\n  state = {\n    animationDuration: 1000,\n    infinite: false,\n    itemWidth: 130,\n    frameSize: 3,\n    step: 3,\n    images: [\n      './img/1.png',\n      './img/2.png',\n      './img/3.png',\n      './img/4.png',\n      './img/5.png',\n      './img/6.png',\n      './img/7.png',\n      './img/8.png',\n      './img/9.png',\n      './img/10.png',\n    ],\n  };\n\n  setInfinity(value: boolean) {\n    const { step, frameSize } = this.state;\n\n    this.setState(() => ({\n      infinite: value,\n      step: value ? frameSize : step,\n    }));\n  }\n\n  setFrameSize(value: number) {\n    this.setState({ frameSize: value });\n  }\n\n  setStep(value: number) {\n    this.setState({ step: value });\n  }\n\n  setItemWidth(value: number) {\n    this.setState({ itemWidth: value });\n  }\n\n  setAnimationDuration(value: number) {\n    this.setState({ animationDuration: value });\n  }\n\n  render() {\n    const {\n      images, frameSize, step, animationDuration, itemWidth, infinite,\n    } = this.state;\n\n    return (\n      <div className=\"app\">\n        <h1 className=\"app__title\">Carousel</h1>\n\n        <Carousel\n          images={images}\n          step={step}\n          itemWidth={itemWidth}\n          frameSize={frameSize}\n          animationDuration={animationDuration}\n          infinite={infinite}\n          className=\"app__carousel\"\n        />\n\n        <div className=\"app__controler\">\n          <label htmlFor=\"frameSize\" className=\"app__label\">\n            {`Frame size: ${frameSize}`}\n\n            <input\n              id=\"frameSize\"\n              type=\"range\"\n              min={1}\n              max={images.length}\n              value={frameSize}\n              onChange={(e) => this.setFrameSize(+e.target.value)}\n            />\n          </label>\n\n          <label htmlFor=\"step\" className=\"app__label\">\n            {`Step: ${step}`}\n\n            <input\n              id=\"step\"\n              type=\"range\"\n              min={1}\n              max={infinite ? frameSize : images.length}\n              value={step}\n              onChange={(e) => this.setStep(+e.target.value)}\n            />\n          </label>\n\n          <label htmlFor=\"animationDuration\" className=\"app__label\">\n            {`Animation duration: ${animationDuration}`}\n\n            <input\n              id=\"animationDuration\"\n              type=\"range\"\n              min={0}\n              max={1000}\n              step={100}\n              value={animationDuration}\n              onChange={(e) => this.setAnimationDuration(+e.target.value)}\n            />\n          </label>\n\n          <label htmlFor=\"itemWidth\" className=\"app__label\">\n            {`Item width: ${itemWidth}`}\n\n            <input\n              id=\"itemWidth\"\n              type=\"range\"\n              min={50}\n              max={250}\n              step={10}\n              value={itemWidth}\n              onChange={(e) => this.setItemWidth(+e.target.value)}\n            />\n          </label>\n\n          <label htmlFor=\"infinite\" className=\"app__label\">\n            {'Infinite: '}\n\n            <input\n              id=\"infinite\"\n              type=\"checkbox\"\n              min={50}\n              max={250}\n              step={10}\n              checked={infinite}\n              onChange={(e) => this.setInfinity(e.target.checked)}\n            />\n          </label>\n\n          <p className=\"app__info\">INFO: To make endless mode work properly, first select &quot;frameSize&quot;</p>\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}